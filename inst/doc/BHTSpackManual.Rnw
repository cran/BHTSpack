% \VignetteIndexEntry{BHTSpack manual}
% \VignetteDepends{BHTSpack}
% \VignetteKeywords{Bayesian Multi-Plate High-Troughput Screening of Compounds}
% \VignettePackage{BHTSpack}
% \VignetteEngine{knitr::knitr}


\documentclass[11pt, a4paper]{article}
 \setlength{\topmargin}{-0.2in}
 \setlength{\oddsidemargin}{0.05 in}
 \setlength{\textwidth}{6in}
 \setlength{\textheight}{9in}
 \headsep=0in
 \oddsidemargin=0in \evensidemargin=0in


\title{\texttt{BHTSpack}: Bayesian Multi-Plate High-Troughput Screening of Compounds}

\author{Ivo D. Shterev \thanks{Correspondence: i.shterev@duke.edu} \and David B. Dunson \and Cliburn Chan \and Gregory D. Sempowski}


\begin{document}

\maketitle 

\section{Introduction}
This vignette describes the use of the R extension package \texttt{BHTSpack} for Bayesian multi-plate high-throughput screening of compounds. The package implements the non-parametric Bayes model described in \cite{shterev}. The model infers potential active compounds (hits) from multiple plates, simultaneously. The plate geometry can be arbitrary and plates may contain different numbers of unique compounds.

This vignette mainly describes the package functionalities, along with examples. We also provide code that reproduces figues in the main body of \cite{shterev}. For more detailed description of the statistical model, please see \cite{shterev}.

\section{Data Format}
The R package \texttt{BHTSpack} assumes that the compound data set is in the form of a list of vectors. Each vector represents a plate. The vector names are the plate names. The element names within a vector are the compound names.  

\section{Synthetic Data Generation}
Synthetic compound data containing specified proportion of compound hits can be generated via the package function \texttt{data.create()}. The resulting data set can be in a list of vectors format or in a list of matrices format. Additionally, the user has the option to add a plate noise to each of the compound plates, thus simulating a plate noise effect. The function \texttt{data.create()} has the following input parameters:
\begin{itemize}
\item {\texttt{N}}: Number of compounds per plate.
\item \{{\texttt{nr}}, {\texttt{nc}}\}: Number of rows and columns per plate, respectively.
\item {\texttt{M}}: Number of plates.
\item {\texttt{p}}: Probability of a compound being a hit.
\item {\texttt{s}}: Random seed (for reproducibility purposes). Default is \texttt{NULL}.
\item \{{\texttt{covrow}}, {\texttt{covcol}}\}: Noise plate row-covariance and column-covariance matrices, respectively. Defaults are \texttt{NULL}.
\item {\texttt{c}}: Constant for scaling plate noise. Default is \texttt{0.0001}.
\item {\texttt{mat}}: Specifies a matrix (\texttt{TRUE}) or a vector (\texttt{FALSE}) plate format. Default is \texttt{FALSE}.
\end{itemize}

The output of \texttt{create.data()} is in the form of a list with the following elements:
\begin{itemize}
\item {\texttt{Z}}: A list of matrices (\texttt{mat=TRUE}) or vectors (\texttt{mat=FALSE}) of compounds.
\item {\texttt{I}}: A list of compound indicators specifying the mixture component (from \texttt{1} to \texttt{K}).
\item {\texttt{B}}: A list of compound indicators specifying a hit (\texttt{1}) or a non-hit (\texttt{0}).
\end{itemize}

\section{Input}
The package main function is \texttt{bhts()}. The following input data and parameters need to be specified:
\begin{itemize}
\item {\texttt Z}: A list of vectors containing unique compound readouts. The vectors should have names, as well as the elements within each vector.
\item {\texttt{iters}}: Total number of iterations to be performed by the MCMC sampler. The first half of the iterations will be discarded as burn in iterations and only the second half will be used in the result.
\item \{{\texttt H}, {\texttt K}\}: Number of local and global DP components, respectively.
\item {\texttt{\{mu00, mu10\}}}: Activity levels (means) of non-hit and hit compounds, respectively. If \texttt{NULL} (default), \texttt{mu00} is set as half the mean of all compounds and \texttt{mu10=3*mu00}.
\item {\texttt{\{a.alpha, b.alpha\}}}: Gamma parameters specifying local DP concentration prior.
\item {\texttt{\{a.tau, b.tau\}}}: Gamma parameters specifying global DP concentration prior.
\item {\texttt s}: Used to specify a random seed (for reproducibility purposes). Default is {\texttt{NULL}}.
\item {\texttt{store}}: If {\texttt{TRUE}}, all samples of certain latent variables are stored in the output object. Default is {\texttt{FALSE}}.
\end{itemize} 

\section{Output}
The output of \texttt{bhts()} is in the form of a list with the following elements:
\begin{itemize}
\item \texttt{hatpai}: A list of vectors of posterior probabilities, estimating the probability of a compound being a hit.
\item \texttt{dat.store}: If \texttt{store=TRUE} (default is \texttt{FALSE}), the output contains a list of \texttt{iters}$\times$\texttt{K} matrices of samples. Each matrix contains the samples of a separate latent variable. At each iteration, the following six variables are stored in a different row of their corresponding matrix, $(\lambda_{1}^{(0)},\ldots,\lambda_{K}^{(0)})$, $(\lambda_{1}^{(1)},\ldots,\lambda_{K}^{(1)})$, $(\mu_{01},\ldots,\mu_{0K})$, $(\mu_{11},\ldots,\mu_{1K})$, $(\sigma_{01}^2,\ldots,\sigma_{0K}^2)$ and $(\sigma_{11}^2,\ldots,\sigma_{1K}^2)$.
\end{itemize}

\section{Determining Significant Hits}
The output from \texttt{bhts()} can be further processed by the use of the function \texttt{r.fdr()}. For a given FDR estimate \cite{muller}, the function computes a significant hit probability threshold \texttt{r}, based on which a list of all significant compound hits is determined. The compounds are sorted in decreasing order of \texttt{hatpai}.

The output of \texttt{r.fdr()} is in the form of a list with the following elements:
\begin{itemize}
\item \texttt{res}: A data frame containing significant hits and their probabilities.
\item \texttt{r}: The computed significant hit probability threshold.
\end{itemize}

\section{Convergence Diagnostics}
The package has the capability to visualize trace and autocorrelation function (ACF) plots of specific latent variables, via the function \texttt{ptrace()}. These plots can be useful in assessing convergence of the algorithm. Given a specific variable, the function produces a composite plot consisting of \texttt{K} trace plots, one for each component.  It has to be noted that for each iteration, the \texttt{K} components of a variable are sorted in increasing order to avoid label switching. The \texttt{pval()} function input is as follows:
\begin{itemize}
\item \texttt{res}: An output object from \texttt{bhts()}.
\item \texttt{var}: Variable for which to display trace plots. Current options are \texttt{mu0} (displaying $\mu_{01},\ldots,\mu_{0K}$), \texttt{mu1} (displaying $\mu_{11},\ldots,\mu_{1K}$), \texttt{sigma0} (displaying $\sigma_{01}^2,\ldots,\sigma_{0K}^2$), \texttt{sigma1} (displaying $\sigma_{11}^2,\ldots,\sigma_{1K}^2$), \texttt{pk0} (displaying $\lambda_{1}^{(0)},\ldots,\lambda_{K}^{(0)}$) and \texttt{pk1} (displaying $\lambda_{1}^{(1)},\ldots,\lambda_{K}^{(1)}$).
\item \texttt{ndisc}: Number of iterations for which to discard samples.
\item \texttt{nr}: Number of rows in the resulting composite plot.
\item \texttt{nc}: Number of columns in the resulting composite plot.
\item \texttt{type}: Type of convergence diagnostic. Currently implemented are trace plots (default \texttt{type="trace"}) and ACF plots (\texttt{type="acf"}).
\end{itemize}

\section{Examples} 
In this section we demonstrate the use of \texttt{BHTSpack} on synthetically generated data.
\tiny
<<echo=TRUE>>=
# loading library
library(BHTSpack)

# Generating a data set of 100 8x10 plates, each plate containing 80 compounds.
# A total of 8000 compounds. 10% of the compounds are hits.
Z = data.create(N=80, nr=8, nc=10, M=100, p=0.4, s=1234)

# Generating the data set as before, but this time adding plate noise to all compounds
Z = data.create(N=80, nr=8, nc=10, M=100, p=0.4, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

# Running the model with 200 iterations
system.time(b.est <- bhts(Z[["Z"]], iters=200, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))

# Compute threshold (r) for significant hit probabilities at FDR=0.05
res = r.fdr(b.est, fdr=0.05)
names(res)
res[["r"]]

# Significant compound hit list
head(res[["res"]])

# Trace plots of hit compound activity
ptrace(b.est, "mu1", ndisc=100, nr=3, nc=4)

# ACF plots of hit compound activity
ptrace(b.est, "mu1", ndisc=100, nr=3, nc=4, type="acf")

sessionInfo()
@
\normalsize

\section{Exporting Results to an HTML File}
The user has the option to export the results of \texttt{bhtsPACK} to an HTML file via the function \texttt{bhts2HTML}. This option  allows for improved readability of the results.

\tiny
<<echo=TRUE>>=
# loading library
library(BHTSpack)

# Generating a data set of 100 8x10 plates, each plate containing 80 compounds.
# A total of 8000 compounds. 40% of the compounds are hits.
Z = data.create(N=80, nr=8, nc=10, M=100, p=0.4, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

# Running the model with 200 iterations
b.est = bhts(Z[["Z"]], iters=200, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE)

# create an html file
#bhts2HTML(res, dir="/dir/", fname="tophits")
@
\normalsize


\section{Reproducing Results} 
In this section we provide code that reproduces figures in the main body of \cite{shterev}.

\subsection{Reproducing Figure 5 (Synthetic Data)}
\tiny
<<echo=TRUE>>=
library(BHTSpack)
Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.4, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))
I = unlist(Z[["I"]])
B = unlist(Z[["B"]])
Z = unlist(Z[["Z"]])

plot(density(Z[I==1 & B==0]), xlim=range(Z), ylim=c(0,6), col="black", lty=2, ylab="Density", main="", xlab="Raw Value")
lines(density(Z[I==1 & B==0]), col="blue", lty=2)
lines(density(Z[I==2 & B==0]), col="green", lty=2)
lines(density(Z[I==3 & B==0]), col="yellow", lty=2)
lines(density(Z[I==4 & B==0]), col="red", lty=2)
lines(density(Z[B==0]), col="black", lty=2, lwd=2)

lines(density(Z[I==1 & B==1]), col="blue", lty=3)
lines(density(Z[I==2 & B==1]), col="green", lty=3)
lines(density(Z[I==3 & B==1]), col="yellow", lty=3)
lines(density(Z[I==4 & B==1]), col="red", lty=3)
lines(density(Z[B==1]), col="black", lty=3, lwd=2)

legend("topright", legend=c("Component 1", "Component 2", "Component 3", "Component 4", "All Components", "Non-Hits", "Hits"), 
col=c("blue", "green", "yellow", "red", "black", "black", "black"), lty=c(1, 1, 1, 1, 1, 2, 3), lwd=c(1, 1, 1, 1, 1, 2, 2))
@
\normalsize

\subsection{Reproducing Figure 7}
The code in this subsection takes longer to execute and is therefore disabled. The user can copy, paste and run the code.
\tiny
<<echo=TRUE>>=
#library(BHTSpack)
#library(pROC)
#library(sights)

#score = function(t, sdat, B){
#  res = unlist(lapply(sdat, as.vector))
#  ind = rep(0, length(res))
#  ind[res>t] = 1

#  a = auc(B, ind)
#  return(a)
#}

### Left Column
#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.1, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))
#system.time(b.est <- bhts(Z[["Z"]], iters=7000, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))
#hatpai = unlist(b.est[["hatpai"]])
#res = data.frame(IDmatch=names(hatpai), hatpai)
#Btab = data.frame(IDmatch=names(unlist(Z[["B"]])), hitind=unlist(Z[["B"]]))
#res = merge(res, Btab, by="IDmatch")

#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.1, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"), mat=TRUE)

## Top plot
#bs = unlist(lapply(Z[["Z"]], function(x){medpolish(x)[["residuals"]]/mad(x)}))
#summary(bs)

#rs = unlist(lapply(Z[["Z"]], function(x){matrix(normR(as.vector(t(x)), 8, 10), 8, 10, byrow=TRUE)}))
#summary(rs)

#r = seq(-4, 21, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, bs, unlist(Z[["B"]]))}))
#summary(AUC)
#btmax = r[which.max(AUC)]
#plot(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="red", ylim=c(0.5, 0.75))
#abline(v=btmax, col="red", lty=2)
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=btmax)

#r = seq(-4, 21, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, rs, unlist(Z[["B"]]))}))
#summary(AUC)
#rtmax = r[which.max(AUC)]
#lines(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="green")
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=rtmax)
#legend("topright", legend=c("R-score", "B-score"), col=c("green", "red"), lty=c(1,1))

## Bottom plot
#rhitind = rep(0, length(rs))
#rhitind[rs>rtmax] = 1

#bhitind = rep(0, length(bs))
#bhitind[bs>btmax] = 1

#plot.roc(res[["hitind"]], res[["hatpai"]], col="blue")
#lines.roc(unlist(Z[["B"]]), bhitind, col="red")
#lines.roc(unlist(Z[["B"]]), rhitind, col="green")
#legend("bottomright", legend=c(paste("BHTS", " (AUC=", round(auc(res[["hitind"]], res[["hatpai"]]), 3), ")", sep=""), paste("R-score", 
#" (AUC=", round(auc(unlist(Z[["B"]]), rhitind), 3), ")", sep=""), paste("B-score", " (AUC=", round(auc(unlist(Z[["B"]]), bhitind), 3), 
#")", sep="")), col=c("blue", "green", "red"), lty=c(1,1,1))

### Middle Column
#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.05, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))
#system.time(b.est <- bhts(Z[["Z"]], iters=7000, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))
#hatpai = unlist(b.est[["hatpai"]])
#res = data.frame(IDmatch=names(hatpai), hatpai)
#Btab = data.frame(IDmatch=names(unlist(Z[["B"]])), hitind=unlist(Z[["B"]]))
#res = merge(res, Btab, by="IDmatch")

#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.05, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"), mat=TRUE)

## Top plot
#bs = unlist(lapply(Z[["Z"]], function(x){medpolish(x)[["residuals"]]/mad(x)}))
#summary(bs)

#rs = unlist(lapply(Z[["Z"]], function(x){matrix(normR(as.vector(t(x)), 8, 10), 8, 10, byrow=TRUE)}))
#summary(rs)

#r = seq(-4, 21, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, bs, unlist(Z[["B"]]))}))
#summary(AUC)
#btmax = r[which.max(AUC)]
#plot(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="red", ylim=c(0.5, 0.75))
#abline(v=btmax, col="red", lty=2)
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=btmax)

#r = seq(-5, 26, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, rs, unlist(Z[["B"]]))}))
#summary(AUC)
#rtmax = r[which.max(AUC)]
#lines(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="green")
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=rtmax)
#legend("topright", legend=c("R-score", "B-score"), col=c("green", "red"), lty=c(1,1))

## Bottom plot
#rhitind = rep(0, length(rs))
#rhitind[rs>rtmax] = 1

#bhitind = rep(0, length(bs))
#bhitind[bs>btmax] = 1

#plot.roc(res[["hitind"]], res[["hatpai"]], col="blue")
#lines.roc(unlist(Z[["B"]]), bhitind, col="red")
#lines.roc(unlist(Z[["B"]]), rhitind, col="green")
#legend("bottomright", legend=c(paste("BHTS", " (AUC=", round(auc(res[["hitind"]], res[["hatpai"]]), 3), ")", sep=""), paste("R-score", 
#" (AUC=", round(auc(unlist(Z[["B"]]), rhitind), 3), ")", sep=""), paste("B-score", " (AUC=", round(auc(unlist(Z[["B"]]), bhitind), 3), 
#")", sep="")), col=c("blue", "green", "red"), lty=c(1,1,1))

### Right Column
#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.01, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))
#system.time(b.est <- bhts(Z[["Z"]], iters=7000, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))
#hatpai = unlist(b.est[["hatpai"]])
#res = data.frame(IDmatch=names(hatpai), hatpai)
#Btab = data.frame(IDmatch=names(unlist(Z[["B"]])), hitind=unlist(Z[["B"]]))
#res = merge(res, Btab, by="IDmatch")

#Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.01, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"), mat=TRUE)

## Top plot
#bs = unlist(lapply(Z[["Z"]], function(x){medpolish(x)[["residuals"]]/mad(x)}))
#summary(bs)

#rs = unlist(lapply(Z[["Z"]], function(x){matrix(normR(as.vector(t(x)), 8, 10), 8, 10, byrow=TRUE)}))
#summary(rs)

#r = seq(-4, 23, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, bs, unlist(Z[["B"]]))}))
#summary(AUC)
#btmax = r[which.max(AUC)]
#plot(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="red", ylim=c(0.5, 0.75))
#abline(v=btmax, col="red", lty=2)
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=btmax)

#r = seq(-5, 28, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, rs, unlist(Z[["B"]]))}))
#summary(AUC)
#rtmax = r[which.max(AUC)]
#lines(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="green")
#axis(1, at=c(-5, 5, 10, 15))
#axis(1, at=rtmax)
#legend("topright", legend=c("R-score", "B-score"), col=c("green", "red"), lty=c(1,1))

## Bottom plot
#rhitind = rep(0, length(rs))
#rhitind[rs>rtmax] = 1

#bhitind = rep(0, length(bs))
#bhitind[bs>btmax] = 1

#plot.roc(res[["hitind"]], res[["hatpai"]], col="blue")
#lines.roc(unlist(Z[["B"]]), bhitind, col="red")
#lines.roc(unlist(Z[["B"]]), rhitind, col="green")
#legend("bottomright", legend=c(paste("BHTS", " (AUC=", round(auc(res[["hitind"]], res[["hatpai"]]), 3), ")", sep=""), paste("R-score", 
#" (AUC=", round(auc(unlist(Z[["B"]]), rhitind), 3), ")", sep=""), paste("B-score", " (AUC=", round(auc(unlist(Z[["B"]]), bhitind), 3), 
#")", sep="")), col=c("blue", "green", "red"), lty=c(1,1,1))
@
\normalsize

\subsection{Reproducing Figure 8}
Parts of the code in this subsection take longer to execute and are therefore disabled. The user can copy, paste and run the code.
\tiny
<<echo=TRUE>>=
library(BHTSpack)
#library(pROC)

aucfunc = function(dat, B){
  Btab = data.frame(hitind=unlist(B))
  Btab = data.frame(IDmatch=rownames(Btab), Btab)

  Res = merge(dat, Btab, by="IDmatch")

  return(auc(Res[["hitind"]], Res[["hatpai"]]))
}


## Left plot
Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.1, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

mu = mean(unlist(Z[["Z"]]))
mu00 = seq(mu, 0, -mu/25)
mu10 = seq(mu, 2*mu, mu/25)

#res = lapply(1:25, function(x){print(x); res=bhts(Z[["Z"]], iters=7000, H=10, K=10, mu00[x], mu10[x], a.alpha=10, 
#b.alpha=5, a.tau=10, b.tau=5, s=1234); return(res);})

#hatpai = lapply(res, function(x){unlist(x[["hatpai"]])})
#hatpai = lapply(hatpai, function(x){data.frame(IDmatch=names(x), hatpai=x)})
#AUC = unlist(lapply(hatpai, aucfunc, Z[["B"]]))

#plot((mu10-mu00)[1:25], AUC, pch=16, xlab=expression(paste(mu[1][0]-mu[0][0])), cex=1.5, cex.lab=1.5, ylim=c(0.8, 0.9))
#abline(v=mu, col="red", lty=2, lwd=2)


## Middle plot
Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.05, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

mu = mean(unlist(Z[["Z"]]))
mu00 = seq(mu, 0, -mu/25)
mu10 = seq(mu, 2*mu, mu/25)

#res = lapply(1:25, function(x){print(x); res=bhts(Z[["Z"]], iters=7000, H=10, K=10, mu00[x], mu10[x], a.alpha=10, 
#b.alpha=5, a.tau=10, b.tau=5, s=1234); return(res);})

#hatpai = lapply(res, function(x){unlist(x[["hatpai"]])})
#hatpai = lapply(hatpai, function(x){data.frame(IDmatch=names(x), hatpai=x)})
#AUC = unlist(lapply(hatpai, aucfunc, Z[["B"]]))

#plot((mu10-mu00)[1:25], AUC, pch=16, xlab=expression(paste(mu[1][0]-mu[0][0])), cex=1.5, cex.lab=1.5, ylim=c(0.8, 0.9))
#abline(v=mu, col="red", lty=2, lwd=2)


## Right plot
Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.01, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

mu = mean(unlist(Z[["Z"]]))
mu00 = seq(mu, 0, -mu/25)
mu10 = seq(mu, 2*mu, mu/25)

#res = lapply(1:25, function(x){print(x); res=bhts(Z[["Z"]], iters=7000, H=10, K=10, mu00[x], mu10[x], a.alpha=10, 
#b.alpha=5, a.tau=10, b.tau=5, s=1234); return(res);})

#hatpai = lapply(res, function(x){unlist(x[["hatpai"]])})
#hatpai = lapply(hatpai, function(x){data.frame(IDmatch=names(x), hatpai=x)})
#AUC = unlist(lapply(hatpai, aucfunc, Z[["B"]]))

#plot((mu10-mu00)[1:25], AUC, pch=16, xlab=expression(paste(mu[1][0]-mu[0][0])), cex=1.5, cex.lab=1.5, ylim=c(0.8, 0.9))
#abline(v=mu, col="red", lty=2, lwd=2)

## Right plot
Z = data.create(N=80, nr=8, nc=10, M=1000, p=0.01, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))

mu = mean(unlist(Z[["Z"]]))
mu00 = seq(mu, 0, -mu/25)
mu10 = seq(mu, 2*mu, mu/25)

#res = lapply(1:25, function(x){print(x); res=bhts(Z[["Z"]], iters=7000, H=10, K=10, mu00[x], mu10[x], a.alpha=10, 
#b.alpha=5, a.tau=10, b.tau=5, s=1234); return(res);})

#hatpai = lapply(res, function(x){unlist(x[["hatpai"]])})
#hatpai = lapply(hatpai, function(x){data.frame(IDmatch=names(x), hatpai=x)})
#AUC = unlist(lapply(hatpai, aucfunc, Z[["B"]]))

#plot((mu10-mu00)[1:25], AUC, pch=16, xlab=expression(paste(mu[1][0]-mu[0][0])), cex=1.5, cex.lab=1.5, ylim=c(0.8, 0.9))
#abline(v=mu, col="red", lty=2, lwd=2)
@
\normalsize

\subsection{Reproducing Figure 9}
The code in this subsection takes longer to execute and is therefore disabled. The user can copy, paste and run the code.
\tiny
<<echo=TRUE>>=
#library(BHTSpack)
#library(pROC)
#library(sights)

#score = function(t, sdat, B){
#  res = unlist(lapply(sdat, as.vector))
#  ind = rep(0, length(res))
#  ind[res>t] = 1

#  a = auc(B, ind)
#  return(a)
#}

#Z = data.create(N=80, nr=8, nc=10, M=5000, p=0.00021, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"))
#system.time(b.est <- bhts(Z[["Z"]], iters=7000, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))
#hatpai = unlist(b.est[["hatpai"]])
#res = data.frame(IDmatch=names(hatpai), hatpai)
#Btab = data.frame(IDmatch=names(unlist(Z[["B"]])), hitind=unlist(Z[["B"]]))
#res = merge(res, Btab, by="IDmatch")

#Z = data.create(N=80, nr=8, nc=10, M=5000, p=0.00021, s=1234, covrow=read.csv("covrow.csv"), covcol=read.csv("covcol.csv"), mat=TRUE)

## Top plot
#bs = unlist(lapply(Z[["Z"]], function(x){medpolish(x)[["residuals"]]/mad(x)}))
#summary(bs)

#rs = unlist(lapply(Z[["Z"]], function(x){matrix(normR(as.vector(t(x)), 8, 10), 8, 10, byrow=TRUE)}))
#summary(rs)

#r = seq(-4, 30, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, bs, unlist(Z[["B"]]))}))
#summary(AUC)
#btmax = r[which.max(AUC)]

#r = seq(-5, 29, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, rs, unlist(Z[["B"]]))}))
#summary(AUC)
#rtmax = r[which.max(AUC)]

#rhitind = rep(0, length(rs))
#rhitind[rs>rtmax] = 1

#bhitind = rep(0, length(bs))
#bhitind[bs>btmax] = 1

#plot.roc(res[["hitind"]], res[["hatpai"]], col="blue")
#lines.roc(unlist(Z[["B"]]), bhitind, col="red")
#lines.roc(unlist(Z[["B"]]), rhitind, col="green")
#legend("bottomright", legend=c(paste("BHTS", " (AUC=", round(auc(res[["hitind"]], res[["hatpai"]]), 3), ")", sep=""), paste("R-score", 
#" (AUC=", round(auc(unlist(Z[["B"]]), rhitind), 3), ")", sep=""), paste("B-score", " (AUC=", round(auc(unlist(Z[["B"]]), bhitind), 3), 
#")", sep="")), col=c("blue", "green", "red"), lty=c(1,1,1))
@
\normalsize

\subsection{Reproducing Figure 10}
The code in this subsection takes longer to execute and is therefore disabled. The user can copy, paste and run the code.
\tiny
<<echo=TRUE>>=
#library(BHTSpack)
#library(pROC)
#library(sights)
#library(gdata)

#score = function(t, s, B){
#  ind = rep(0, length(s))
#  ind[s>t] = 1

#  a = auc(B, ind)
#  return(a)
#}

## It is assumed that data files are in a folder "temp"
## read data
#dat = read.csv("temp/EColiFilamentation2006_screeningdata.csv", sep="\t")
#dim(dat)

## read hit indicators
#hits = read.csv("temp/CompoundSearchResults.csv", sep=",")
#dim(hits)
#hits = data.frame(hits, hits=rep(1,nrow(hits)))
#hits = data.frame(ChembankId=hits[["ChemBank.Id"]], hitind=rep(1,nrow(hits)))

## merge with hit indicator
#dat = merge(dat, hits, by="ChembankId", all.x=TRUE)
#dim(dat)
#dat[["hitind"]][is.na(dat[["hitind"]])] = 0

## merge with map
#map = read.xls("map.xlsx")
#dat = merge(dat, map, by="AssayName")

## Organism DRC39 at 24h
#dat = subset(dat, Organism=="DRC39" & ExpTime=="24h")

#plates = unique(as.character(dat[["Plate"]]))
#unique(as.character(dat[["WellType"]]))
#dat = subset(dat, WellType=="compound-treatment")

#dat = lapply(plates, function(x){d=subset(dat, Plate==x)})
#names(dat) = plates
#l = unlist(lapply(dat, nrow))
#table(l)

## include only 352-well plates
#dat = dat[l==352]

#unique(as.character(unlist(lapply(dat, function(x){x$AssayName}))))
#sum(is.na(unlist(lapply(dat, function(x){x$RawValueA}))))
#sum(unlist(lapply(dat, function(x){x$hitind})))
#sum(!is.na(unlist(lapply(dat, function(x){x$RawValueA}))))

## sorting wells row-wise
#dat = lapply(dat, function(x){ix=sort.int(as.character(x[["Well"]]), index.return=TRUE)[["ix"]]; return(x[ix,]);})

## extracting raw values, hit indicators and well names
#Z = lapply(dat, function(x){x[["RawValueA"]]})
#B = lapply(dat, function(x){x[["hitind"]]})
#W = lapply(dat, function(x){x[["Well"]]})

## constructing plates of raw values, row-wise
#Z = lapply(Z, function(x){matrix(x, 16, 22, byrow=TRUE)})

## naming rows and columns of plates
#Z = lapply(Z, function(x){rownames(x)=LETTERS[1:16]; colnames(x)=formatC(seq(1,22),flag=0,digits=1); return(x);})

## constructing plates of indicator variables (row-wise) and vectorizing (column-wise) each plate
#B = lapply(B, function(x){as.vector(matrix(x, 16, 22, byrow=TRUE))})

## constructing plates of well names (row-wise) and vectorizing (column-wise) each plate
#W = lapply(W, function(x){as.vector(matrix(x, 16, 22, byrow=TRUE))})

## Left plot
#plot(density(unlist(Z)[unlist(B)==0]), col="blue", ylab="Density", main="", xlim=range(unlist(Z)), xlab="Raw Value")
#lines(density(unlist(Z)[unlist(B)==1]), col="red")
#legend("topright", legend=c("Non-Hits", "Hits"), col=c("blue", "red"), lty=c(1,1))

## normalizing plates of raw values
#Z = lapply(Z, function(x){(x-mean(x))/sd(x)})

## naming indicator variables
#bn = names(B)
#B = lapply(1:length(B), function(x){names(B[[x]])=W[[x]]; return(B[[x]]);})
#names(B) = bn

## construct object for B-score and R-score methods
#Zmat = list(Z=Z, B=B)

## construct object for BHTS method
## vectorizing (column-wise) each plate of raw values and naming them with well names
#zn = names(Z)
#Z = lapply(1:length(Z), function(x){d=as.vector(Z[[x]]); names(d)=W[[x]]; return(d);})
#names(Z) = zn
#Z = list(Z=Z, B=B)

## Run BHTS
#system.time(b.est <- bhts(Z[["Z"]], iters=7000, H=10, K=10, a.alpha=10, b.alpha=5, a.tau=10, b.tau=5, s=1234, store=TRUE))
#hatpai = unlist(b.est[["hatpai"]])
#res = data.frame(IDmatch=names(hatpai), hatpai)
#Btab = data.frame(IDmatch=names(unlist(Z[["B"]])), hitind=unlist(Z[["B"]]))
#res = merge(res, Btab, by="IDmatch")

## Run B-score
#bs = unlist(lapply(Zmat[["Z"]], function(x){medpolish(x)[["residuals"]]/mad(x)}))
#summary(bs)

## Middle plot
#r = seq(-31, 9, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, bs, unlist(Zmat[["B"]]))}))
#summary(AUC)
#btmax = r[which.max(AUC)]
#plot(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="red", ylim=c(0.44, 0.56))
#abline(v=btmax, col="red", lty=2)
#axis(1)
#axis(1, at=btmax)

## Run R-score
#rs = unlist(lapply(Zmat[["Z"]], function(x){matrix(normR(as.vector(t(x)), 16, 22), 16, 22, byrow=TRUE)}))
#summary(rs)

#r = seq(-45, 29, 0.5)
#AUC = unlist(lapply(r, function(x){score(x, rs, unlist(Zmat[["B"]]))}))
#summary(AUC)
#rtmax = r[which.max(AUC)]
#lines(r, AUC, type="l", xlab="Threshold", ylab="AUC", lwd=2, xaxt="n", col="green")
#abline(v=rtmax, col="green", lty=2)
#axis(1, at=rtmax)
#legend("topright", legend=c("R-score", "B-score"), col=c("green", "red"), lty=c(1,1))

## Right plot
#rhitind = rep(0, length(rs))
#rhitind[rs>rtmax] = 1

#bhitind = rep(0, length(bs))
#bhitind[bs>btmax] = 1

#plot.roc(res[["hitind"]], res[["hatpai"]], col="blue")
#lines.roc(unlist(Zmat[["B"]]), bhitind, col="red")
#lines.roc(unlist(Zmat[["B"]]), rhitind, col="green")
#legend("bottomright", legend=c(paste("BHTS", " (AUC=", round(auc(res[["hitind"]], res[["hatpai"]]), 3), ")", sep=""), paste("R-score", 
#" (AUC=", round(auc(unlist(Zmat[["B"]]), rhitind), 3), ")", sep=""), paste("B-score", " (AUC=", round(auc(unlist(Zmat[["B"]]), bhitind), 
#3), ")", sep="")), col=c("blue", "green", "red"), lty=c(1,1,1))
@
\normalsize


\section{Acknowledgement}
This project was funded by the Division of Allergy, Immunology, and Transplantation, National Institute of Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human Services, under contract No. HHSN272201400054C entitled \textquotedblleft{Adjuvant Discovery For Vaccines Against West Nile Virus and Influenza}\textquotedblright, awarded to Duke University and lead by Drs. Herman Staats and Soman Abraham. 

\nocite{*}
\bibliographystyle{plain}
\bibliography{BHTSpackBibl}

\end{document}
